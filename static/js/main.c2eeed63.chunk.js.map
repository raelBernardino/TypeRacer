{"version":3,"sources":["components/Completed.js","App.js","serviceWorker.js","index.js"],"names":["Completed","react_default","a","createElement","className","onClick","this","props","reset","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","typeChallenges","text","completed","displayedChallenge","userType","challengeArr","correct","background","backgroundColor","timer","startTimer","_reset","bind","assertThisInitialized","_checkIfCompleted","_onChangeChecker","_changeDisplayedWords","_checkIfCorrect","_randomChallengePicker","_splitSentence","_this2","setInterval","setState","console","log","num","Math","floor","random","length","objectSpread","split","splice","join","e","_this3","typed","target","value","tempLetterArr","tempWordArr","typedWord","i","shift","typedArr","slice","_this4","style","components_Completed","onChange","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2eeed63.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Completed extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"completed-page\">\r\n        <span className=\"completed-page_header\">Completed</span>\r\n        <button className=\"completed-page_button\" onClick={this.props.reset}>Play Again</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Completed","import React, { Component } from 'react';\nimport Completed from './components/Completed'\nimport './App.scss';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      typeChallenges: [\n        {\n          text: 'The quick brown fox jumps over the lazy dog.',\n          completed: false\n        },\n        {\n          text: '\"Remember it\\'s a sin to kill a mockingbird.\" That was the only time I ever heard Atticus say it was a sin to do something, and I asked Miss Maudie about it.',\n          completed: false\n        },\n        {\n          text: 'I think we dream so we don’t have to be apart for so long. If we’re in each other’s dreams, we can be together all the time.',\n          completed: false\n        },\n        {\n          text: 'Eddie pushed the money into Dominguez\\'s palm. Then he walked out back to the storage area. A small \"fishing hole\" had been cut into the boardwalk planks years ago, and Eddie lifted the plastic cap. He tugged on a nylon line that dropped 80 feet to the sea. A piece of bologna was still attached.',\n          completed: false\n        },\n        {\n          text: '\"You mean Dr. Carlisle Cullen\\'s family?\" the tall, older boy asked before I could respond, much to Lauren\\'s irritation. He was really closer to a man than a boy, and his voice was very deep.',\n          completed: false\n        },\n        {\n          text: 'Remember also your Creator in the days of your youth, before the evil days come and the years draw near of which you will say, \"I have no pleasure in them\"',\n          completed: false\n        }\n      ],\n      displayedChallenge: '',\n      userType: '',\n      challengeArr: [],\n      correct: true,\n      completed: false,\n      background: {\n        backgroundColor: '',\n      },\n      timer: 0,\n      startTimer: false\n    }\n    this._reset = this._reset.bind(this)\n    this._checkIfCompleted = this._checkIfCompleted.bind(this)\n    this._onChangeChecker = this._onChangeChecker.bind(this)\n    this._changeDisplayedWords = this._changeDisplayedWords.bind(this)\n    this._checkIfCorrect = this._checkIfCorrect.bind(this)\n    this._randomChallengePicker = this._randomChallengePicker.bind(this)\n    this._splitSentence = this._splitSentence.bind(this)\n  }\n\n  componentDidMount() {\n    this._randomChallengePicker()\n  }\n\n  _timer() {\n    setInterval(() => {\n      this.setState({ timer: this.state.timer + 1 })\n      console.log(this.state.timer)\n    }, 1000)\n  }\n\n  _randomChallengePicker() {\n    const typeChallenges = this.state.typeChallenges\n    const background = this.state.background\n    let num = Math.floor(Math.random() * Math.floor(typeChallenges.length))\n    this.setState({\n      displayedChallenge: typeChallenges[num].text,\n      userType: '',\n      background: {\n        ...background,\n        backgroundColor: 'rgb(106, 250, 202)'\n      }\n    })\n    this._splitSentence(num)\n  }\n\n  _splitSentence(num) {\n    const typeChallenges = this.state.typeChallenges\n    let challengeArr = typeChallenges[num].text.split('')\n    let displayedChallenge = typeChallenges[num].text\n      .split(' ')\n      .splice(0, 6)\n      .join(' ')\n    this.setState({\n      challengeArr,\n      displayedChallenge\n    })\n  }\n\n  _onChangeChecker(e) {\n    let typed = e.target.value\n    let tempLetterArr = typed.split('')\n    let tempWordArr = typed.split(' ')\n    this.setState({ userType: typed }, () => this._checkIfCompleted())\n    this._checkIfCorrect(tempLetterArr)\n    this._changeDisplayedWords(tempWordArr)\n  }\n\n  _changeDisplayedWords(typedWord) {\n    const challengeArr = this.state.challengeArr.join('').split(' ')\n    for (var i = 0; i < typedWord.length; i++) {\n      if (typedWord[i] === challengeArr[0]) {\n        challengeArr.shift()\n      }\n    }\n    this.setState({ displayedChallenge: challengeArr.splice(0, 6).join(' ') })\n  }\n\n  _checkIfCorrect(typedArr) {\n    let challengeArr = this.state.challengeArr\n    const correct = this.state.correct\n    const background = this.state.background\n    for (var i = 0; i < typedArr.length; i++) {\n      if (typedArr.join('') === challengeArr.join('').slice(0, typedArr.length)) {\n        this.setState({\n          correct,\n          background: {\n            ...background,\n            backgroundColor: 'rgb(106, 250, 202)'\n          }\n        })\n      } else {\n        this.setState({\n          correct: !correct,\n          background: {\n            ...background,\n            backgroundColor: 'rgb(250, 106, 106)'\n          }\n        })\n      }\n    }\n  }\n\n  _checkIfCompleted() {\n    let userType = this.state.userType\n    const challengeArr = this.state.challengeArr\n      .join('')\n    if (userType === challengeArr) {\n      this.setState({\n        completed: !this.state.completed,\n        startTimer: !this.state.startTimer\n      })\n    }\n  }\n\n  _reset() {\n    this.setState({\n      completed: !this.state.completed\n    })\n    this._randomChallengePicker()\n  }\n\n  render() {\n    return (\n      <div className=\"type-racer\" style={this.state.background}>\n        {\n          this.state.completed ?\n            <Completed\n              reset={this._reset}\n            /> :\n            <div className=\"app\">\n              <span className=\"app_text-header\">\n                {this.state.displayedChallenge}\n              </span>\n              <input className=\"app_input\" onChange={(e) => this._onChangeChecker(e)} value={this.state.userType} />\n              <button className=\"app_button\" onClick={this._randomChallengePicker}>New</button>\n            </div>\n        }\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}